layout(local_size_x = 8, local_size_y = 8) in;
#include "./GlobalDataBuffer.glsl"

#ifdef DEBUG
#include "./DebugFlags.glsl"
#endif

layout(push_constant) uniform Push {
    mat4 prevProjView;
} push;

layout(set = 1, binding = 0, rgba32f) uniform image2D currentPositions;
layout(set = 2, binding = 0, rgba32f) uniform image2D currentFrameImage;// Color + surface ID
layout(set = 3, binding = 0, rgba32f) uniform image2D previousFrameImage;// Color + acuumulation count

void main() {
    #ifdef DEBUG
    if (globalData.debugFlag != LIT){
        return;
    }
    #endif
    if (!globalData.enabledDenoiser){
        return;
    }

    ivec2 sizeImg = imageSize(currentFrameImage);
    vec4 worldPos = imageLoad(currentPositions, ivec2(gl_GlobalInvocationID.xy));
    if (worldPos.a == 0){
        return;
    }

    vec4 clipSpacePosition = push.prevProjView * vec4(worldPos.rgb, 1.0);
    vec3 ndcPosition = clipSpacePosition.xyz / clipSpacePosition.w;
    vec2 uvTexture = ndcPosition.xy * 0.5 + 0.5;
    ivec2 imageSpace = ivec2(uvTexture * sizeImg);

    vec4 currentFrameColor = imageLoad(currentFrameImage, ivec2(gl_GlobalInvocationID.xy));// Color + surface ID
    vec4 previousFrameColor = imageLoad(previousFrameImage, imageSpace);

    float accumulationCount = max(min(globalData.maxAccumulation, previousFrameColor.a), 1);
    vec3 accumulatedResult = previousFrameColor.rgb * (1. - 1./accumulationCount) + currentFrameColor.rgb * 1./accumulationCount;

    imageStore(currentFrameImage, ivec2(gl_GlobalInvocationID.xy), vec4(accumulatedResult, currentFrameColor.a));
}
