layout(local_size_x = 8, local_size_y = 8) in;
#include "./GlobalDataBuffer.glsl"

#ifdef DEBUG
#include "./DebugFlags.glsl"
#endif

layout(push_constant) uniform Push {
    mat4 prevProjView;
} push;

layout(set = 1, binding = 0) uniform sampler2D gBufferPosition;
layout(set = 2, binding = 0, rgba32f) uniform image2D currentFrame;
layout(set = 3, binding = 0, rgba32f) uniform image2D previousFrame;

void main() {

    #ifdef DEBUG
    if (globalData.debugFlag != LIT && globalData.debugFlag != GI){
        return;
    }
    #endif
    ivec2 sizeImg = imageSize(currentFrame);
    vec2 texCoords = vec2(gl_GlobalInvocationID.xy) / imageSize(currentFrame);
    vec4 worldPos = texture(gBufferPosition, texCoords);
    if (worldPos.a == 0){
        return;
    }

    vec4 clipSpacePosition = push.prevProjView * vec4(worldPos.rgb, 1.0);
    vec3 ndcPosition = clipSpacePosition.xyz / clipSpacePosition.w;
    vec2 uvTexture = ndcPosition.xy * 0.5 + 0.5;
    ivec2 imageSpace = ivec2(uvTexture * sizeImg);

    vec4 currentFrameColor = imageLoad(currentFrame, ivec2(gl_GlobalInvocationID.xy));
    vec4 previousFrameColor = imageLoad(previousFrame, imageSpace);

    float accumulationCount = max(min(globalData.giMaxAccumulation, previousFrameColor.a), 1);
    vec3 accumulatedResult = previousFrameColor.rgb * (1. - 1./accumulationCount) + currentFrameColor.rgb * 1./accumulationCount;

    imageStore(currentFrame, ivec2(gl_GlobalInvocationID.xy), vec4(accumulatedResult, currentFrameColor.a));
}
