layout(local_size_x = 8, local_size_y = 8) in;

#include "../GlobalDataBuffer.glsl"
#include "../CreateRay.glsl"
#include "../rt/RTStructures.glsl"
#include "../rt/RayTracer.glsl"

vec3 randomColor(float seed) {
    float r = rand(vec3(seed));
    float g = rand(vec3(seed + r));
    return vec3(r, g, rand(vec3(seed + g)));
}

void main() {
    vec2 texCoords = vec2(gl_GlobalInvocationID.xy) / imageSize(outputImage);

    vec3 rayDir = createRay(texCoords, globalData.invProj, globalData.invView);
    vec3 rayOrigin = globalData.cameraWorldPosition.rgb;

    HitData data = trace(rayOrigin, rayDir);
    if (data.didHit) {
        //        imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(randomColor(float(data.hitId + 1)), 1.0));
        imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(data.triangleTestCount /float(globalData.searchCountDivisor), 0, data.boxTestCount/float(globalData.searchCountDivisor), 1.0));
    }
}
