layout(local_size_x = 8, local_size_y = 8) in;

#include "./GlobalDataBuffer.glsl"

#ifdef DEBUG
#include "./DebugFlags.glsl"
#endif


layout(set = 1, binding = 0, rgba32f) uniform image2D currentFrameImage;// Color + surface ID
layout(set = 2, binding = 0, rgba32f) uniform image2D previousFrameImage;// Color + acuumulation count
layout(set = 3, binding = 0, rgba32f) uniform image2D previousFrameMetadataImage;// surface ID + position
layout(set = 4, binding = 0, rgba32f) uniform image2D currentPositions;

layout(push_constant) uniform Push {
    float diffWeight;
} push;

vec3 i_cube_32( uint data ) {
    uvec2 iuv = uvec2( data, data>>15u ) & uvec2(32767u,16383u);
    vec2 uv = vec2(iuv)*2.0/vec2(32767.0,16383.0) - 1.0;

    uint is = (data>>31u)&1u;
    vec3 nor = vec3((is==0u)?1.0:-1.0,uv.xy);

    uint id = (data>>29u)&3u;
    if(id==0u) nor = nor.xyz;
    else if(id==1u) nor = nor.zxy;
    else            nor = nor.yzx;

    return normalize(nor);
}

void main() {
    ivec2 coords =  ivec2(gl_GlobalInvocationID.xy);
    #ifdef DEBUG
    if (globalData.debugFlag != LIT){
        return;
    }
    #endif
    if (!globalData.enabledDenoiser){
        return;
    }

    vec4 worldPos = imageLoad(currentPositions, coords);
    if (worldPos.a == 0){
        imageStore(previousFrameImage, coords, vec4(0, 0, 0, 1));
        imageStore(previousFrameMetadataImage, coords, vec4(0));
        return;
    }

    vec4 currentFrame = imageLoad(currentFrameImage, coords);// Color + surface ID
    vec4 previousFrameMetadata = imageLoad(previousFrameMetadataImage, coords);
    bool validHistory = (previousFrameMetadata.r == currentFrame.a) && (dot(previousFrameMetadata.gba, worldPos.rgb) > 0.95);

    if (!validHistory){
        imageStore(previousFrameImage, coords, vec4(currentFrame.rgb, 1));
    } else {
        vec4 prev = imageLoad(previousFrameImage, coords);
        float accumulationCount = prev.a + 1.0;

        // --- Adjust Accumulation Count Based on Color Change ---
        vec3 currentColor = currentFrame.rgb;
        vec3 colorVariance = vec3(0.0);

        for (int dx = -1; dx <= 1; ++dx) {
            for (int dy = -1; dy <= 1; ++dy) {
                ivec2 neighborCoord = coords + ivec2(dx, dy);
                neighborCoord = clamp(neighborCoord, ivec2(0), imageSize(currentFrameImage) - ivec2(1));

                vec3 neighborColor = imageLoad(currentFrameImage, neighborCoord).rgb;
                colorVariance += abs(currentColor - neighborColor);
            }
        }
        colorVariance /= 9.0;
        float averageColorVariance = (colorVariance.r + colorVariance.g + colorVariance.b) / 3.0;
        float varianceFactor = clamp(1.0 - averageColorVariance * push.diffWeight, 0.1, 1.0);
        accumulationCount *= varianceFactor;
        imageStore(previousFrameImage, coords, vec4(currentFrame.rgb, round(accumulationCount)));
    }
    imageStore(previousFrameMetadataImage, coords, vec4(currentFrame.a, worldPos.rgb));
}