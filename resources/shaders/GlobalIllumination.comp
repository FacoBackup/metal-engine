layout(local_size_x = 8, local_size_y = 8) in;


#include "./GlobalDataBuffer.glsl"
#include "./CreateRay.glsl"
#include "./VoxelRaytracing.glsl"
#include "./Atmosphere.glsl"
#define LIGHTS_SET 2
#define LIGHTS_BINDING 0
#include "./LightsBuffer.glsl"

layout(set = 3, binding = 0) uniform sampler2D gBufferNormal;
layout(set = 4, binding = 0) uniform sampler2D voxelPositionSampler;
layout(set = 5, binding = 0) uniform sampler2D voxelHitPositionSampler;
layout(set = 6, binding = 0, rgba32f) uniform image2D outputImage;

vec3 sampleHemisphere(vec3 normal, uint i) {
    float xi1 = fract(sin(normal.x + float(i) * 12.9898) * 43758.5453);
    float xi2 = fract(sin(normal.y + normal.z+ float(i) * 78.233) * 43758.5453);
    float theta = acos(sqrt(1.0 - xi1));
    float phi = 2.0 * 3.141592 * xi2;
    vec3 tangent = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    vec3 bitangent = cross(normal, tangent);
    vec3 sampleDir = tangent * sin(theta) * cos(phi) +
    bitangent * sin(theta) * sin(phi) +
    normal * cos(theta);

    return normalize(sampleDir);
}

vec3 computeDiffuseIndirectLight(Ray initialRay, uint maxBounces, float bias) {
    vec3 indirectLight = vec3(0.0);// Accumulated indirect light
    vec3 throughput = vec3(1.0);// Tracks light contribution across bounces
    Ray ray = initialRay;

    for (uint bounce = 0; bounce < maxBounces; ++bounce) {
        Hit hitData = traceAllTiles(ray);

        if (!hitData.anyHit) {
            break;
        }
        vec3 hitPos = hitData.hitPosition;
        VoxelMaterialData matData = unpackVoxel(hitData);
        vec3 hitNormal = matData.normal;
        vec3 albedo = matData.albedo;
        vec3 randomDir = sampleHemisphere(hitNormal, bounce);
        float NdotL = max(dot(hitNormal, randomDir), 0.0);
        vec3 bounceLight = albedo * NdotL;
        indirectLight += throughput * bounceLight;
        throughput *= albedo;
        ray.o = hitPos + hitNormal * bias;
        ray.d = randomDir;
    }

    return indirectLight;
}

float testLight(vec3 lightPosition, in vec3 firstHitPos){
    vec3 rayDirection = normalize(lightPosition - firstHitPos);
    Ray ray = Ray(firstHitPos, rayDirection, 1./rayDirection, globalData.cameraWorldPosition, false);
    Hit hitData = traceAllTiles(ray);
    float lightDistance = length(lightPosition - firstHitPos);
    float hitDistance = length(hitData.hitPosition - firstHitPos);
    if (hitData.anyHit && hitDistance < lightDistance) {
        return clamp(1 / lightDistance, 0, 1);
    }
    return 1;
}

vec3 randomColor(float seed) {
    float r = rand(vec3(seed));
    float g = rand(vec3(seed + r));
    return vec3(r, g, rand(vec3(seed + g)));
}

void main() {
    vec2 outImageSize = imageSize(outputImage);
    vec2 texCoords = vec2(gl_GlobalInvocationID.xy) / outImageSize;
    vec4 hitPosition = texture(voxelHitPositionSampler, texCoords);
    if (hitPosition.a == 0){
        return;
    }
    vec4 finalColor = vec4(0, 0, 0, 1);

    float bias = max(.05, 1e-4 * length(hitPosition.xyz));
    vec3 normal =texture(gBufferNormal, texCoords).rgb;
    vec3 firstHitPos = hitPosition.xyz + normal * bias;

    // TODO - ADD CONTRIBUTION TO EVERY LIGHT WITH SHADOWS ENABLED
    if (globalData.lightsQuantity > 0){
        Light l = lightsBuffer.lights[0];
        if (length(l.position - hitPosition.xyz) < l.outerRadius) {
            finalColor.a = testLight(l.position, firstHitPos);
        }
    }
    if (globalData.enabledSun){
        finalColor.a *= testLight(normalize(globalData.sunPosition) * 20, firstHitPos);
    }

    if (globalData.giBounces > 0) {
        for (uint i = 0; i < globalData.giSamplesPerPixel; i++) {
            vec3 randomDir = sampleHemisphere(normal, i);
            Ray ray = Ray(firstHitPos, randomDir, 1.0 / randomDir, globalData.cameraWorldPosition, false);
            //
            //            //            Hit aoHitData = traceAllTiles(ray);
            //            //            if (aoHitData.anyHit) {
            //            //                float distance = length(aoHitData.hitPosition - firstHitPos);
            //            //                finalColor.a *= exp(-distance * AO_FALLOFF);
            vec3 indirectColor = computeDiffuseIndirectLight(ray, globalData.giBounces, bias);
            if (length(indirectColor) == 0 && globalData.enabledSun){
                float NdotL = max(dot(normal, randomDir), 0.0);
                indirectColor = calculate_sky_luminance_rgb(normalize(globalData.sunPosition), ray.d, 2.0f) * 0.05f * NdotL;
            }
            finalColor.rgb += indirectColor * 10;
            //            }
        }
    }

    ivec2 coord = ivec2(hashWorldSpaceCoord(texture(voxelPositionSampler, texCoords).rgb) * outImageSize);
    imageStore(outputImage, coord, finalColor);
}